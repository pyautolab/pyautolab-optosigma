name: tests
on:
  push:
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - ".pre-commit-config.yaml"
      - "LICENSE.txt"
      - "NOTICE.md"
      - "images/**"
      - ".github/dependabot.yml"
      - ".vscode/**"
    branches:
      - main
  pull_request:
    paths-ignore:
      - "**.md"
      - ".gitignore"
      - ".pre-commit-config.yaml"
      - "LICENSE.txt"
      - "NOTICE.md"
      - "images/**"
      - ".github/dependabot.yml"
      - ".vscode/settings.json"

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        os: [ubuntu-latest, macOS-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'true'

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get full Python version
      id: full-python-version
      shell: bash
      run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

    - name: Bootstrap poetry
      shell: bash
      run: curl -sL https://install.python-poetry.org | python -

    - name: Update PATH
      if: runner.os != 'Windows'
      shell: bash
      run: echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Update PATH for Windows
      if: runner.os == 'Windows'
      shell: bash
      run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

    - name: Configure poetry
      run: poetry config virtualenvs.in-project true

    - name: Set up cache
      uses: actions/cache@v2
      id: cache
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install

    # - name: Run pytest
    #   shell: bash
    #   run: poetry run pytest -v tests
